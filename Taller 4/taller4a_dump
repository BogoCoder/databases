--
-- PostgreSQL database dump
--

-- Dumped from database version 10.10 (Ubuntu 10.10-0ubuntu0.18.04.1)
-- Dumped by pg_dump version 10.10 (Ubuntu 10.10-0ubuntu0.18.04.1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


--
-- Name: agregarcargacreditos(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.agregarcargacreditos() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin 
	update instructor
		set carga_creditos = carga_creditos + 
		(select creditos from (dicta natural join curso)
		where curso_cod = new.curso_cod and grupo_cod = new.grupo_cod)
		where inst_id = new.inst_id;
	return new;
end;
$$;


ALTER FUNCTION public.agregarcargacreditos() OWNER TO postgres;

--
-- Name: agregarcargarcreditos(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.agregarcargarcreditos() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin 
	update instructor
		set carga_creditos = carga_creditos + 
		(select creditos from dicta natural join curso
		where creditos = new.creditos);
	return new;
end;
$$;


ALTER FUNCTION public.agregarcargarcreditos() OWNER TO postgres;

--
-- Name: agregargrupos(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.agregargrupos() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
	update curso 
		set num_grupos = num_grupos + 1 where curso_cod = new.curso_cod;
	return new;
end;
$$;


ALTER FUNCTION public.agregargrupos() OWNER TO postgres;

--
-- Name: eliminarcargacreditos(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.eliminarcargacreditos() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin 
	update instructor
		set carga_creditos = carga_creditos - 
		(select creditos from dicta natural join curso
		where curso_cod = old.curso_cod and grupo_cod = old.grupo_cod)
		where inst_id = old.inst_id;
	return old;
end;
$$;


ALTER FUNCTION public.eliminarcargacreditos() OWNER TO postgres;

--
-- Name: eliminargrupos(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.eliminargrupos() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
	update curso
		set num_grupos = num_grupos - 1 where curso_cod = old.curso_cod;
	return old;
end;
$$;


ALTER FUNCTION public.eliminargrupos() OWNER TO postgres;

--
-- Name: maxcargacreditos(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.maxcargacreditos() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin 
	if (select carga_creditos from instructor where inst_id = new.inst_id) > 18 then
		raise exception 'El instructor no puede tener una carga de mas de 18 creditos.';
	end if;
	return new;
end;
$$;


ALTER FUNCTION public.maxcargacreditos() OWNER TO postgres;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: curso; Type: TABLE; Schema: public; Owner: ubunsam
--

CREATE TABLE public.curso (
    curso_cod character varying(7) NOT NULL,
    nombre character varying(50),
    nombre_unid character varying(20),
    creditos numeric(2,0),
    num_grupos integer DEFAULT 0
);


ALTER TABLE public.curso OWNER TO ubunsam;

--
-- Name: dicta; Type: TABLE; Schema: public; Owner: ubunsam
--

CREATE TABLE public.dicta (
    inst_id character varying(5) NOT NULL,
    curso_cod character varying(8) NOT NULL,
    grupo_cod character varying(8) NOT NULL,
    semestre character varying(6) NOT NULL,
    ano numeric(4,0) NOT NULL
);


ALTER TABLE public.dicta OWNER TO ubunsam;

--
-- Name: grupo; Type: TABLE; Schema: public; Owner: ubunsam
--

CREATE TABLE public.grupo (
    curso_cod character varying(8) NOT NULL,
    grupo_cod character varying(8) NOT NULL,
    semestre character varying(6) NOT NULL,
    ano numeric(4,0) NOT NULL
);


ALTER TABLE public.grupo OWNER TO ubunsam;

--
-- Name: instructor; Type: TABLE; Schema: public; Owner: ubunsam
--

CREATE TABLE public.instructor (
    inst_id character varying(5) NOT NULL,
    nombres character varying(20) NOT NULL,
    apellidos character varying(20) NOT NULL,
    nombre_unid character varying(20),
    salario numeric(8,2),
    carga_creditos integer DEFAULT 0
);


ALTER TABLE public.instructor OWNER TO ubunsam;

--
-- Name: unid_acad; Type: TABLE; Schema: public; Owner: ubunsam
--

CREATE TABLE public.unid_acad (
    nombre_unid character varying(20) NOT NULL,
    edificio character varying(15) NOT NULL,
    presupuesto numeric(12,2)
);


ALTER TABLE public.unid_acad OWNER TO ubunsam;

--
-- Data for Name: curso; Type: TABLE DATA; Schema: public; Owner: ubunsam
--

COPY public.curso (curso_cod, nombre, nombre_unid, creditos, num_grupos) FROM stdin;
003	laboratorio	BIOL	5	0
000	programacion	MACC	4	1
002	algoritmos	MACC	4	3
001	arquitectura	MACC	4	2
\.


--
-- Data for Name: dicta; Type: TABLE DATA; Schema: public; Owner: ubunsam
--

COPY public.dicta (inst_id, curso_cod, grupo_cod, semestre, ano) FROM stdin;
1	001	000	2	2019
1	002	000	2	2019
1	000	000	2	2019
1	002	001	2	2019
\.


--
-- Data for Name: grupo; Type: TABLE DATA; Schema: public; Owner: ubunsam
--

COPY public.grupo (curso_cod, grupo_cod, semestre, ano) FROM stdin;
000	000	2	2019
002	000	2	2019
001	000	2	2019
002	001	2	2019
002	002	2	2019
001	002	2	2019
\.


--
-- Data for Name: instructor; Type: TABLE DATA; Schema: public; Owner: ubunsam
--

COPY public.instructor (inst_id, nombres, apellidos, nombre_unid, salario, carga_creditos) FROM stdin;
2	Ana	Gutierrez	MACC	200.00	0
3	Ernerto	Huertas	ECON	500.00	0
4	Reinaldo	Rondon	MACC	300.00	0
1	Juan	Perez	MACC	100.00	16
\.


--
-- Data for Name: unid_acad; Type: TABLE DATA; Schema: public; Owner: ubunsam
--

COPY public.unid_acad (nombre_unid, edificio, presupuesto) FROM stdin;
MACC	Cabal	100.00
ECON	Pedro	800.00
BIOL	QM	500.00
ROSEA	Claustro	300.00
\.


--
-- Name: curso curso_pkey; Type: CONSTRAINT; Schema: public; Owner: ubunsam
--

ALTER TABLE ONLY public.curso
    ADD CONSTRAINT curso_pkey PRIMARY KEY (curso_cod);


--
-- Name: dicta dicta_pkey; Type: CONSTRAINT; Schema: public; Owner: ubunsam
--

ALTER TABLE ONLY public.dicta
    ADD CONSTRAINT dicta_pkey PRIMARY KEY (inst_id, curso_cod, grupo_cod, semestre, ano);


--
-- Name: grupo grupo_pkey; Type: CONSTRAINT; Schema: public; Owner: ubunsam
--

ALTER TABLE ONLY public.grupo
    ADD CONSTRAINT grupo_pkey PRIMARY KEY (curso_cod, grupo_cod, semestre, ano);


--
-- Name: instructor instructor_pkey; Type: CONSTRAINT; Schema: public; Owner: ubunsam
--

ALTER TABLE ONLY public.instructor
    ADD CONSTRAINT instructor_pkey PRIMARY KEY (inst_id);


--
-- Name: unid_acad unid_acad_pkey; Type: CONSTRAINT; Schema: public; Owner: ubunsam
--

ALTER TABLE ONLY public.unid_acad
    ADD CONSTRAINT unid_acad_pkey PRIMARY KEY (nombre_unid);


--
-- Name: dicta agregarcargacreditos; Type: TRIGGER; Schema: public; Owner: ubunsam
--

CREATE TRIGGER agregarcargacreditos AFTER INSERT ON public.dicta FOR EACH ROW EXECUTE PROCEDURE public.agregarcargacreditos();


--
-- Name: grupo agregargrupos; Type: TRIGGER; Schema: public; Owner: ubunsam
--

CREATE TRIGGER agregargrupos AFTER INSERT ON public.grupo FOR EACH ROW EXECUTE PROCEDURE public.agregargrupos();


--
-- Name: dicta eliminarcargacreditos; Type: TRIGGER; Schema: public; Owner: ubunsam
--

CREATE TRIGGER eliminarcargacreditos AFTER DELETE ON public.dicta FOR EACH ROW EXECUTE PROCEDURE public.agregarcargacreditos();


--
-- Name: grupo eliminargrupos; Type: TRIGGER; Schema: public; Owner: ubunsam
--

CREATE TRIGGER eliminargrupos AFTER DELETE ON public.grupo FOR EACH ROW EXECUTE PROCEDURE public.eliminargrupos();


--
-- Name: dicta maxcargacreditos; Type: TRIGGER; Schema: public; Owner: ubunsam
--

CREATE TRIGGER maxcargacreditos AFTER INSERT ON public.dicta FOR EACH ROW EXECUTE PROCEDURE public.maxcargacreditos();


--
-- Name: curso curso_nombre_unid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: ubunsam
--

ALTER TABLE ONLY public.curso
    ADD CONSTRAINT curso_nombre_unid_fkey FOREIGN KEY (nombre_unid) REFERENCES public.unid_acad(nombre_unid);


--
-- Name: dicta dicta_curso_cod_fkey; Type: FK CONSTRAINT; Schema: public; Owner: ubunsam
--

ALTER TABLE ONLY public.dicta
    ADD CONSTRAINT dicta_curso_cod_fkey FOREIGN KEY (curso_cod, grupo_cod, semestre, ano) REFERENCES public.grupo(curso_cod, grupo_cod, semestre, ano);


--
-- Name: dicta dicta_inst_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: ubunsam
--

ALTER TABLE ONLY public.dicta
    ADD CONSTRAINT dicta_inst_id_fkey FOREIGN KEY (inst_id) REFERENCES public.instructor(inst_id);


--
-- Name: grupo grupo_curso_cod_fkey; Type: FK CONSTRAINT; Schema: public; Owner: ubunsam
--

ALTER TABLE ONLY public.grupo
    ADD CONSTRAINT grupo_curso_cod_fkey FOREIGN KEY (curso_cod) REFERENCES public.curso(curso_cod);


--
-- Name: instructor instructor_nombre_unid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: ubunsam
--

ALTER TABLE ONLY public.instructor
    ADD CONSTRAINT instructor_nombre_unid_fkey FOREIGN KEY (nombre_unid) REFERENCES public.unid_acad(nombre_unid);


--
-- PostgreSQL database dump complete
--

